var fs = require('fs');
var path = require('path');
var env = require('../env');
var api = require('../api');
var exec = require('child_process').exec;

var log = api.log.create('swanson-push');

var args = process.argv.slice(2);

//	The github repo clone url
//
var cloneUrl = args[1];

//	The directory of the repo that is being watched/changed
//
var sourceDir = args[2];

//	The directory in which test clones are pulled and tested
//
var cloneDir = args[0];

//	What was removed, modified or added
//
var commits = JSON.parse(args[3]);

function cloneRepo(cb) {
	var command = 'git clone ' + cloneUrl + ' ' + cloneDir;
	log.info('*CLONING: ' + command);
	exec(command, cb);
}

function enterAndBuild(cb) {
	var command = 'cd ' + cloneDir + ';npm i; gulp init;npm test';
	log.info('*BUILDING: ' + command);
	exec(command, cb);
}

//	Run through the #cloneDir and move all files/folders that have changed
//
function move(cb) {

	var removing = commits.removed;
	//	Both modified and added
	//
	var adding = commits.modified.concat(commits.added);
	
	var removeCommands = [];
	var addCommands = [];
	var command = [];
	
	//	remove commands are simple rm's
	//	add || modify we rm from source, and replace with newly built files
	//
	removing.forEach(function(f) {
		removeCommands.push(
			'rm -rf ' + sourceDir + '/' + f
		);
	});
	
	adding.forEach(function(f) {
		addCommands.push(
			'rm -rf ' + sourceDir + '/' + f,
			'mv ' + cloneDir + '/' + f + ' ' + sourceDir + '/' + f
		);
	});
	
	//	Just creating a long string of ;-separated commands for #exec
	//
	removeCommands.length && command.push(removeCommands.join(';'));
	addCommands.length && command.push(addCommands.join(';'));
	
	//	We always move the build folder
	//
	command.push('rm -rf ' + sourceDir + '/' + env.BUILD_DIR + '; mv ' + cloneDir + '/' + env.BUILD_DIR + ' ' + sourceDir + '/' + env.BUILD_DIR);
	
	command = command.join(';');

	log.info('*MOVING: ' + command);

	exec(command, cb);
}

//	Clones do NOT have a bin/.config.json file (.gitignore'd).
//	This is generated by individual builds. Use our local version to
//	build/test. Note that the server is not started during this process,
//	so locally-unique port and other settings aren't used, and this
//	generated config file will never be copied into production.
//
function prepareClone(cb) {
	var command = cloneDir + '/bin/.config.json';
	fs.writeFile(command, JSON.stringify(env), cb);
	log.info("*WRITING CONFIG: " + command);
}

function cleanAndRestart(cb) {
	var command = 'rm -rf ' + cloneDir + ';pm2 gracefulReload autopilot-server';
	exec(command, cb);
	log.info("*WEBHOOK RESTART: " + command);
}

log.info("*WEBHOOK RECEIVED");

//	The action -- clone, build, move, restart
//
cloneRepo(function(err) {
	if(err) {
		//	do some more here
		return log.error('Clone error: ' + err);
	}
	prepareClone(function(err) {
		if(err) {
			return log.error('Prepare error: ' + err);
		}
		enterAndBuild(function(err, data) {
			if(err) {
				//	Notification
				return log.error('Build error: ' + err);
			}
			move(function(err) {
				if(err) {
					return log.error('Move error: ' + err);
				}
				cleanAndRestart(function(err) {
					if(err) {
						return log.error('Clean error: ' + err);
					}
				});
			});
		});
	});
});

